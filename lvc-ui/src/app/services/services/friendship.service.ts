/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptFriendRequest } from '../fn/friendship/accept-friend-request';
import { AcceptFriendRequest$Params } from '../fn/friendship/accept-friend-request';
import { blockUser } from '../fn/friendship/block-user';
import { BlockUser$Params } from '../fn/friendship/block-user';
import { FriendshipResponseDto } from '../models/friendship-response-dto';
import { getBlockedUsers } from '../fn/friendship/get-blocked-users';
import { GetBlockedUsers$Params } from '../fn/friendship/get-blocked-users';
import { getFriends } from '../fn/friendship/get-friends';
import { GetFriends$Params } from '../fn/friendship/get-friends';
import { getFriendshipStatus } from '../fn/friendship/get-friendship-status';
import { GetFriendshipStatus$Params } from '../fn/friendship/get-friendship-status';
import { getReceivedPendingRequests } from '../fn/friendship/get-received-pending-requests';
import { GetReceivedPendingRequests$Params } from '../fn/friendship/get-received-pending-requests';
import { getSentPendingRequests } from '../fn/friendship/get-sent-pending-requests';
import { GetSentPendingRequests$Params } from '../fn/friendship/get-sent-pending-requests';
import { rejectFriendRequest } from '../fn/friendship/reject-friend-request';
import { RejectFriendRequest$Params } from '../fn/friendship/reject-friend-request';
import { removeFriend } from '../fn/friendship/remove-friend';
import { RemoveFriend$Params } from '../fn/friendship/remove-friend';
import { sendFriendRequest } from '../fn/friendship/send-friend-request';
import { SendFriendRequest$Params } from '../fn/friendship/send-friend-request';

@Injectable({ providedIn: 'root' })
export class FriendshipService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rejectFriendRequest()` */
  static readonly RejectFriendRequestPath = '/friendship/{friendshipId}/reject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectFriendRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectFriendRequest$Response(params: RejectFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return rejectFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectFriendRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectFriendRequest(params: RejectFriendRequest$Params, context?: HttpContext): Observable<void> {
    return this.rejectFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `acceptFriendRequest()` */
  static readonly AcceptFriendRequestPath = '/friendship/{friendshipId}/accept';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptFriendRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptFriendRequest$Response(params: AcceptFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return acceptFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptFriendRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptFriendRequest(params: AcceptFriendRequest$Params, context?: HttpContext): Observable<{
}> {
    return this.acceptFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `sendFriendRequest()` */
  static readonly SendFriendRequestPath = '/friendship/request';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendFriendRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendFriendRequest$Response(params: SendFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipResponseDto>> {
    return sendFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendFriendRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendFriendRequest(params: SendFriendRequest$Params, context?: HttpContext): Observable<FriendshipResponseDto> {
    return this.sendFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipResponseDto>): FriendshipResponseDto => r.body)
    );
  }

  /** Path part for operation `blockUser()` */
  static readonly BlockUserPath = '/friendship/block/{userToBlockId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `blockUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  blockUser$Response(params: BlockUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return blockUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `blockUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  blockUser(params: BlockUser$Params, context?: HttpContext): Observable<void> {
    return this.blockUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getSentPendingRequests()` */
  static readonly GetSentPendingRequestsPath = '/friendship/sent-pending-requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSentPendingRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSentPendingRequests$Response(params?: GetSentPendingRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipResponseDto>>> {
    return getSentPendingRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSentPendingRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSentPendingRequests(params?: GetSentPendingRequests$Params, context?: HttpContext): Observable<Array<FriendshipResponseDto>> {
    return this.getSentPendingRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipResponseDto>>): Array<FriendshipResponseDto> => r.body)
    );
  }

  /** Path part for operation `getReceivedPendingRequests()` */
  static readonly GetReceivedPendingRequestsPath = '/friendship/received-pending-requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReceivedPendingRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReceivedPendingRequests$Response(params?: GetReceivedPendingRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipResponseDto>>> {
    return getReceivedPendingRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReceivedPendingRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReceivedPendingRequests(params?: GetReceivedPendingRequests$Params, context?: HttpContext): Observable<Array<FriendshipResponseDto>> {
    return this.getReceivedPendingRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipResponseDto>>): Array<FriendshipResponseDto> => r.body)
    );
  }

  /** Path part for operation `getFriends()` */
  static readonly GetFriendsPath = '/friendship/friendslist';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriends()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriends$Response(params?: GetFriends$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipResponseDto>>> {
    return getFriends(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriends$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriends(params?: GetFriends$Params, context?: HttpContext): Observable<Array<FriendshipResponseDto>> {
    return this.getFriends$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipResponseDto>>): Array<FriendshipResponseDto> => r.body)
    );
  }

  /** Path part for operation `getFriendshipStatus()` */
  static readonly GetFriendshipStatusPath = '/friendship/friendship-status/{friendId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendshipStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipStatus$Response(params: GetFriendshipStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getFriendshipStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendshipStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipStatus(params: GetFriendshipStatus$Params, context?: HttpContext): Observable<string> {
    return this.getFriendshipStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getBlockedUsers()` */
  static readonly GetBlockedUsersPath = '/friendship/blocked-users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBlockedUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBlockedUsers$Response(params?: GetBlockedUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipResponseDto>>> {
    return getBlockedUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBlockedUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBlockedUsers(params?: GetBlockedUsers$Params, context?: HttpContext): Observable<Array<FriendshipResponseDto>> {
    return this.getBlockedUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipResponseDto>>): Array<FriendshipResponseDto> => r.body)
    );
  }

  /** Path part for operation `removeFriend()` */
  static readonly RemoveFriendPath = '/friendship/friends/{friendId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeFriend()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFriend$Response(params: RemoveFriend$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeFriend(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeFriend$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFriend(params: RemoveFriend$Params, context?: HttpContext): Observable<void> {
    return this.removeFriend$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
