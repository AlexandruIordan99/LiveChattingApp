/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getChatMessages } from '../fn/message/get-chat-messages';
import { GetChatMessages$Params } from '../fn/message/get-chat-messages';
import { getUnreadMessageCount } from '../fn/message/get-unread-message-count';
import { GetUnreadMessageCount$Params } from '../fn/message/get-unread-message-count';
import { isChatRead } from '../fn/message/is-chat-read';
import { IsChatRead$Params } from '../fn/message/is-chat-read';
import { markMessagesAsRead } from '../fn/message/mark-messages-as-read';
import { MarkMessagesAsRead$Params } from '../fn/message/mark-messages-as-read';
import { MessageResponse } from '../models/message-response';
import { sendDirectMessage } from '../fn/message/send-direct-message';
import { SendDirectMessage$Params } from '../fn/message/send-direct-message';
import { sendGroupMessage } from '../fn/message/send-group-message';
import { SendGroupMessage$Params } from '../fn/message/send-group-message';
import { uploadMediaMessage } from '../fn/message/upload-media-message';
import { UploadMediaMessage$Params } from '../fn/message/upload-media-message';

@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `sendGroupMessage()` */
  static readonly SendGroupMessagePath = '/messages/group-chats/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendGroupMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendGroupMessage$Response(params: SendGroupMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return sendGroupMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendGroupMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendGroupMessage(params: SendGroupMessage$Params, context?: HttpContext): Observable<void> {
    return this.sendGroupMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `sendDirectMessage()` */
  static readonly SendDirectMessagePath = '/messages/direct-chats/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendDirectMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendDirectMessage$Response(params: SendDirectMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return sendDirectMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendDirectMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendDirectMessage(params: SendDirectMessage$Params, context?: HttpContext): Observable<void> {
    return this.sendDirectMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `markMessagesAsRead()` */
  static readonly MarkMessagesAsReadPath = '/messages/chat/{chatId}/read';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markMessagesAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markMessagesAsRead$Response(params: MarkMessagesAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return markMessagesAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markMessagesAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markMessagesAsRead(params: MarkMessagesAsRead$Params, context?: HttpContext): Observable<void> {
    return this.markMessagesAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadMediaMessage()` */
  static readonly UploadMediaMessagePath = '/messages/chat/{chatId}/media';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadMediaMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadMediaMessage$Response(params: UploadMediaMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadMediaMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadMediaMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadMediaMessage(params: UploadMediaMessage$Params, context?: HttpContext): Observable<void> {
    return this.uploadMediaMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getChatMessages()` */
  static readonly GetChatMessagesPath = '/messages/chat/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatMessages$Response(params: GetChatMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getChatMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatMessages(params: GetChatMessages$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getChatMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

  /** Path part for operation `getUnreadMessageCount()` */
  static readonly GetUnreadMessageCountPath = '/messages/chat/{chatId}/unread-count';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadMessageCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadMessageCount$Response(params: GetUnreadMessageCount$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getUnreadMessageCount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadMessageCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadMessageCount(params: GetUnreadMessageCount$Params, context?: HttpContext): Observable<number> {
    return this.getUnreadMessageCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `isChatRead()` */
  static readonly IsChatReadPath = '/messages/chat/{chatId}/is-read';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isChatRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  isChatRead$Response(params: IsChatRead$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return isChatRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isChatRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isChatRead(params: IsChatRead$Params, context?: HttpContext): Observable<boolean> {
    return this.isChatRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
